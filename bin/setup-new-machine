#!/bin/bash
MYRC_DIR="$HOME/myrc/"

SYSTEM_PKGS="zsh fasd fzf git neovim ctags tmux byobu inotify-tools"
APPS_PKGS="meld gnome-tweaks inkscape nethack"
DEV_PKGS="cmake make automake gcc gcc-c++ kernel-devel python-devel autoconf readline-devel ncurses-devel openssl-devel libyaml-devel libxslt-devel libffi-devel libtool unixODBC-devel erlang"
FONT_PKGS="google-roboto-fonts google-roboto-mono-fonts google-roboto-slab-fonts google-roboto-condensed-fonts"

function backpath() {
  if [ -f $1 ] || [ -d $1 ]; then
    mv $1 $1.bak
  fi
}

function symlink() {
  backpath $2
  ln -sf $1 $2
}

function install_rcs() {
  echo " * Install RC files..."

  symlink $MYRC_DIR/gitconfig $HOME/.gitconfig
  symlink $MYRC_DIR/gitignore $HOME/.gitignore

  symlink $MYRC_DIR/zshrc $HOME/.zshrc
  symlink $MYRC_DIR/zimrc $HOME/.zimrc
  symlink $MYRC_DIR/zlogin $HOME/.zlogin

  symlink $MYRC_DIR/rails.rc $HOME/.rails.rc
  symlink $MYRC_DIR/pryrc $HOME/.pryrc
}

function install_bin() {
  echo " * Install Bin dir..."

  [ ! -e $HOME/bin ] && ln -sf $MYRC_DIR/bin $HOME/bin
  chmod +x $HOME/bin/*
}

function install_pkgs() {
  sudo dnf install -y ${SYSTEM_PKGS} ${APPS_PKGS} ${DEV_PKGS}
}

function install_zim() {
  if [ -d $HOME/.zim ]; then
    echo " * Update zsh fw Zim..."
    cd $HOME/.zim
    git pull
  else
    echo " * Install zsh fw Zim..."
    git clone --recursive https://github.com/zimfw/zimfw.git ${ZDOTDIR:-${HOME}}/.zim

    # setopt EXTENDED_GLOB
    # for template_file in ${ZDOTDIR:-${HOME}}/.zim/templates/*; do
    #   user_file="${ZDOTDIR:-${HOME}}/.${template_file:t}"
    #   touch ${user_file}
    #   ( print -rn "$(<${template_file})$(<${user_file})" >! ${user_file} ) 2>/dev/null
    # done

    symlink $MYRC_DIR/zlogin $HOME/.zlogin
    symlink $MYRC_DIR/zshrc $HOME/.zshrc
    symlink $MYRC_DIR/zimrc $HOME/.zimrc

    #chsh -s =zsh
    sudo usermod -s /bin/zsh ja
  fi
}

function install_rbenv() {
  if [ -d $HOME/.rbenv ]; then
    echo " * Update rbenv..."
    cd ~/.rbenv && git pull
    cd ~/.rbenv/plugins
    for p in `ls` ; do
      cd $p && git pull && cd ..
    done
  else
    echo " * Install rbenv..."
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    cd ~/.rbenv && src/configure && make -C src

    echo "   * Install rbenv plugins..."
    mkdir -p ~/.rbenv/plugins
    git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
  fi
  mkdir -p "$(rbenv root)"/plugins
  git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
  git clone https://github.com/rkh/rbenv-update.git "$(rbenv root)/plugins/rbenv-update"
  git clone git://github.com/tpope/rbenv-communal-gems.git ~/.rbenv/plugins/rbenv-communal-gems
  rbenv communize --all
}

function install_asdf() {
  symlink $MYRC_DIR/default-gems $HOME/.default-gemsc
  symlink $MYRC_DIR/asdfrc-gems $HOME/.asdfrc

  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.3
  asdf plugin-add nodejs
  asdf plugin-add elixir
  asdf plugin-add ruby
}

function install_tmux() {
  echo " * Install tmux (byobu) ..."

  # mkdir -p ~/.tmux/plugins

  symlink $MYRC_DIR/byobu/tmux.conf ~/.byobu/.tmux.conf

  # if [ -d $HOME/.tmux/plugins/tpm ]; then
  #   cd ~/.tmux/plugins/tpm && git pull
  # else
  #   git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  # fi
}

function install_flatpak() {
  flatpak remote-add flathub https://flathub.org/repo/flathub.flatpakrepo
  # flatpak remote-ls flathub | grep org.gtk.Gtk3theme
  flatpak install flathub org.gtk.Gtk3theme.Arc-Dark
  flatpak install flathub org.freedesktop.Platform.ffmpeg
}

function install_ffdev() {
  flatpak install --from https://firefox-flatpak.mojefedora.cz/org.mozilla.FirefoxDevEdition.flatpakref
}

function install_vim() {
  [ ! -d $HOME/.vim ] && git clone git://github.com/jalberto/bass-vim.git $HOME/.vim
  [ ! -e $HOME/.nvim ] && ln -s ~/.vim ~/.nvim
  [ ! -e $HOME/.vimrc ] && ln -s ~/.vim/vimrc ~/.vimrc
  mkdir -p $HOME/.config/nvim
  [ ! -e $HOME/.config/nvim/init.vim ] && ln -s ~/.vim/vimrc ~/.config/nvim/init.vim

  pip install --user neovim
  pip3 install --user neovim
}

function install_docker() {
  sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
  sudo dnf config-manager --set-enabled docker-ce-test
  sudo dnf install -y docker-ce docker-compose
}

function install_k8s() {
  sudo tee /etc/yum.repos.d/kubernetes.repo <<EOF
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
  sudo dnf install -y kubectl-1.8.9-0

  cd /tmp
  wget https://kubernetes-helm.storage.googleapis.com/helm-v2.8.2-linux-amd64.tar.gz
  tar xvfz helm-v2.8.2-linux-amd64.tar.gz
  mv linux-amd64/helm ~/bin/

  curl -sSL https://github.com/shyiko/kubesec/releases/download/0.8.0/kubesec-0.8.0-linux-amd64 -o kubesec
  chmod a+x kubesec
  sudo mv kubesec /usr/local/bin/
}

function install_vpn() {
  sudo wget https://repo.windscribe.com/fedora/windscribe.repo -O /etc/yum.repos.d/windscribe.repo
  sudo dnf install windscribe-cli
}

if [ -z $1 ]; then
  install_flatpak
  install_pkgs
  install_zim
  install_asdf
  install_tmux
  install_vim
  install_rcs
  install_bin
  install_docker
  install_k8s
  install_vpn
else
  $1
fi
